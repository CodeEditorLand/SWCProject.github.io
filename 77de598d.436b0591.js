(window.webpackJsonp=window.webpackJsonp||[]).push([[113],{187:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),c=(n(0),n(335)),s={title:"Changelog: swc v1.1.13",author:"DongYoon Kang",authorURL:"http://github.com/kdy1",authorFBID:0x5af8dbecdbce},o={permalink:"/blog/2020/01/17/swc-1.1.13",source:"@site/blog/2020-01-17-swc-1.1.13.md",description:"Bugfixes",date:"2020-01-17T00:00:00.000Z",tags:[],title:"Changelog: swc v1.1.13",readingTime:1.45,truncated:!1,prevItem:{title:"Changelog: swc v1.1.14",permalink:"/blog/2020/01/23/swc-1.1.14"},nextItem:{title:"Changelog: swc v1.1.12",permalink:"/blog/2020/01/08/swc-1.1.12"}},i=[{value:"Bugfixes",id:"bugfixes",children:[{value:"Class methods (#579)",id:"class-methods-579",children:[]},{value:"jsx container (#584)",id:"jsx-container-584",children:[]},{value:"hygiene (#591)",id:"hygiene-591",children:[]}]},{value:"New features",id:"new-features",children:[{value:"TypePredicate.asserts (#567)",id:"typepredicateasserts-567",children:[]}]},{value:"Span improvements",id:"span-improvements",children:[{value:"TypePredicate (#580)",id:"typepredicate-580",children:[]},{value:"Class (#581)",id:"class-581",children:[]},{value:"Jsx (#582)",id:"jsx-582",children:[]}]}],p={toc:i};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"bugfixes"},"Bugfixes"),Object(c.b)("h3",{id:"class-methods-579"},"Class methods (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/pull/579"}),"#579"),")"),Object(c.b)("p",null,"There was a bug of swc that identifiers in the body of class methods are not handled by resolver pass. It results in ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/swc-project/swc/issues/578"}),"a bug")," and it's now fixed."),Object(c.b)("h3",{id:"jsx-container-584"},"jsx container (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/issues/584"}),"#584"),")"),Object(c.b)("p",null,"Previously you cannot get the span of ",Object(c.b)("inlineCode",{parentName:"p"},"{4}"),". Instead, you can only get span of ",Object(c.b)("inlineCode",{parentName:"p"},"4"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"const t = <test other={4} />;\n")),Object(c.b)("p",null,"This is fixed by ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/swc-project/swc/pull/592"}),"a pr"),", and you can now get the span of jsx expression container."),Object(c.b)("h3",{id:"hygiene-591"},"hygiene (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/issues/591"}),"#591"),")"),Object(c.b)("p",null,"Initialization of exported variable is now properly handled. Previously,"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'export class Example {\n  @foo() bar = "1";\n  @foo() baz = "2";\n}\n')),Object(c.b)("p",null,"was miscompiled, while"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'class Example {\n  @foo() bar = "1";\n  @foo() baz = "2";\n}\n')),Object(c.b)("p",null,"is compiled correctly (and tested). I added some tests to prevent regression."),Object(c.b)("h2",{id:"new-features"},"New features"),Object(c.b)("h3",{id:"typepredicateasserts-567"},"TypePredicate.asserts (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/pull/567"}),"#567"),")"),Object(c.b)("p",null,"Starting with v1.1.13, ",Object(c.b)("inlineCode",{parentName:"p"},"swc")," can parse asserts type predicate."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'function isString(x: unknown): asserts x is string {\n  if (typeof x !== "string") throw new Error("Not a string.");\n}\n')),Object(c.b)("p",null,"This is a feature of typescript 3.7. Also note that type is changed slightly."),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),'export interface TsTypePredicate extends Node, HasSpan {\n  type: "TsTypePredicate";\n\n  // This is added\n  asserts: boolean;\n\n  paramName: TsThisTypeOrIdent;\n  typeAnnotation: TsTypeAnnotation;\n}\n')),Object(c.b)("h2",{id:"span-improvements"},"Span improvements"),Object(c.b)("p",null,"Thanks to ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/dsherret"}),"@dsherret"),", there are more span improvements."),Object(c.b)("h3",{id:"typepredicate-580"},"TypePredicate (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/pull/580"}),"#580"),")"),Object(c.b)("p",null,"Previously starts of span of some type predicates started too early and it's now fixed so that the span points type predicate correctly."),Object(c.b)("h3",{id:"class-581"},"Class (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/pull/581"}),"#581"),")"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"Spans of class members and classes should include decorators."),Object(c.b)("li",{parentName:"ul"},"Fix hi position for class parameter properties."),Object(c.b)("li",{parentName:"ul"},"Fix span of members with accessibility.")),Object(c.b)("h3",{id:"jsx-582"},"Jsx (",Object(c.b)("a",Object(r.a)({parentName:"h3"},{href:"https://github.com/swc-project/swc/pull/582"}),"#582"),")"),Object(c.b)("p",null,"Span of jsx opening element, closing element, spread child, and expression containers are fixed."))}l.isMDXComponent=!0},335:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),b=l(n),d=r,h=b["".concat(s,".").concat(d)]||b[d]||u[d]||c;return n?a.a.createElement(h,o(o({ref:t},p),{},{components:n})):a.a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,s=new Array(c);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<c;p++)s[p]=n[p];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);