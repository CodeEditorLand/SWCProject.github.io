(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{264:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return u}));var n=r(3),a=r(7),o=(r(0),r(329)),c={title:"Changelog: swc v1.1.31",author:"DongYoon Kang",authorURL:"http://github.com/kdy1",authorFBID:0x5af8dbecdbce},i={permalink:"/blog/2020/03/01/swc-1.1.31",source:"@site/blog/2020-03-01-swc-1.1.31.md",description:"Performance",date:"2020-03-01T00:00:00.000Z",tags:[],title:"Changelog: swc v1.1.31",readingTime:.77,truncated:!1,prevItem:{title:"Changelog: swc v1.1.33",permalink:"/blog/2020/03/04/swc-1.1.33"},nextItem:{title:"Changelog: swc v1.1.30",permalink:"/blog/2020/02/29/swc-1.1.30"}},s=[{value:"Performance",id:"performance",children:[{value:"parser becomes 10% ~ 15% faster",id:"parser-becomes-10--15-faster",children:[]},{value:"codegen with sourcemap becomes 80% faster",id:"codegen-with-sourcemap-becomes-80-faster",children:[]}]}],p={toc:s};function u(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"performance"},"Performance"),Object(o.b)("h3",{id:"parser-becomes-10--15-faster"},"parser becomes 10% ~ 15% faster"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"swc")," uses a special technique copied from ",Object(o.b)("inlineCode",{parentName:"p"},"rustc")," to store identifers and spans compactly.\nHowever, it's memory-performance tradeoff, and encoding and decoding is not super fast operation.\nSo, while ",Object(o.b)("em",{parentName:"p"},"parsing"),", swc use un-compact version of span, and uses compact version of span after parsing.\nThe make parser much faster."),Object(o.b)("h3",{id:"codegen-with-sourcemap-becomes-80-faster"},"codegen with sourcemap becomes 80% faster"),Object(o.b)("p",null,"I designed ",Object(o.b)("inlineCode",{parentName:"p"},"swc"),"'s core module to support merging multiple file into a file.\nBecause of the design, ",Object(o.b)("inlineCode",{parentName:"p"},"swc")," used a concurrent data structures while generating code.\nBut it was not enough for performance. I added a cache layer related to source map, and the layer makes swc much faster"),Object(o.b)("h4",{id:"previous"},"Previous"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"emit_colors ... bench:      23,601 ns/iter (+/- 15,849) = 49 MB/s\n")),Object(o.b)("h4",{id:"after"},"After"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{}),"test emit_colors ... bench:      13,659 ns/iter (+/- 450) = 86 MB/s\ntest emit_large  ... bench:     112,836 ns/iter (+/- 16,139) = 45 MB/s\n")))}u.isMDXComponent=!0},329:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return f}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=a.a.createContext({}),u=function(e){var t=a.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=u(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(r),m=n,f=l["".concat(c,".").concat(m)]||l[m]||b[m]||o;return r?a.a.createElement(f,i(i({ref:t},p),{},{components:r})):a.a.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<o;p++)c[p]=r[p];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);