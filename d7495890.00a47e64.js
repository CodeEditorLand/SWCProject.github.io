(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{284:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return i})),r.d(t,"toc",(function(){return s})),r.d(t,"default",(function(){return l}));var n=r(3),o=r(7),a=(r(0),r(331)),c={title:"Changelog: swc v1.1.5",author:"DongYoon Kang",authorURL:"http://github.com/kdy1",authorFBID:0x5af8dbecdbce},i={permalink:"/blog/2019/12/11/swc-1.1.5",source:"@site/blog/2019-12-11-swc-1.1.5.md",description:"dynamic import with es3 target",date:"2019-12-11T00:00:00.000Z",tags:[],title:"Changelog: swc v1.1.5",readingTime:.935,truncated:!1,prevItem:{title:"Changelog: swc v1.1.6",permalink:"/blog/2019/12/14/swc-1.1.6"},nextItem:{title:"Changelog: swc v1.1.4",permalink:"/blog/2019/12/09/swc-1.1.4"}},s=[{value:"dynamic import with es3 target",id:"dynamic-import-with-es3-target",children:[]},{value:"script parser",id:"script-parser",children:[]},{value:"typescript parser improvement",id:"typescript-parser-improvement",children:[{value:"arrow expression in conditional expressions",id:"arrow-expression-in-conditional-expressions",children:[]},{value:"import type",id:"import-type",children:[]},{value:"yield object",id:"yield-object",children:[]}]}],p={toc:s};function l(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"dynamic-import-with-es3-target"},"dynamic import with es3 target"),Object(a.b)("p",null,"Previously, swc converts import() to ","_","import() as import is a keyword in es3. But, as import() can be stripped out in many way, swc now emits import if ",Object(a.b)("inlineCode",{parentName:"p"},"jsc.parser.dynamicImport")," is true."),Object(a.b)("h2",{id:"script-parser"},"script parser"),Object(a.b)("p",null,"Previously, swc only allows parsing a file as module. Now there's an option to parse file as a script."),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'import { transformSync } from "@swc/core";\n\nconst code = transformSync(`with(foo){}`, {\n  isModule: false\n});\n')),Object(a.b)("h2",{id:"typescript-parser-improvement"},"typescript parser improvement"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"swc_ecma_parser")," can now parse typescript compiler and rxjs."),Object(a.b)("h3",{id:"arrow-expression-in-conditional-expressions"},"arrow expression in conditional expressions"),Object(a.b)("p",null,"From now, complex code like"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"export const assertEachNode = shouldAssert(AssertionLevel.Normal)\n  ? (nodes: Node[], test: (node: Node) => boolean, message?: string): void =>\n      assert(\n        test === undefined || every(nodes, test),\n        message || \"Unexpected node.\",\n        () => `Node array did not pass test '${getFunctionName(test)}'.`,\n        assertEachNode\n      )\n  : noop;\n")),Object(a.b)("p",null,"can be parsed."),Object(a.b)("h3",{id:"import-type"},"import type"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"swc_ecma_parser")," now supports import types. It means,"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'const tty = require("tty") as typeof import("tty");\n')),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'let a: typeof import("fs");\n')),Object(a.b)("p",null,"are valid."),Object(a.b)("h3",{id:"yield-object"},"yield object"),Object(a.b)("p",null,"Also, codes like"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"function* gen() {\n  yield {};\n}\n")),Object(a.b)("p",null,"become valid."))}l.isMDXComponent=!0},331:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var n=r(0),o=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},b=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=l(r),d=n,m=b["".concat(c,".").concat(d)]||b[d]||u[d]||a;return r?o.a.createElement(m,i(i({ref:t},p),{},{components:r})):o.a.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,c=new Array(a);c[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,c[1]=i;for(var p=2;p<a;p++)c[p]=r[p];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,r)}d.displayName="MDXCreateElement"}}]);